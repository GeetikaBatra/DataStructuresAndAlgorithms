package DataStructures;

import java.util.Scanner;

public class linkedList {
	public static node<Integer> getLinkedList()
	{
		node<Integer> head = null;
		node<Integer> previous = null;
		int count=0;
		int currentPosition;
		Scanner s = new Scanner(System.in);
		System.out.print("Enter the new Element");
		int input = s.nextInt();
		
		while(s.nextInt()!=-1)
		{
			node<Integer> newNode = new node<Integer>();
			newNode.data=input;
			newNode.next=null;
			if(head==null)
			{
				head=newNode;
				
			}
			else
			{
				
				previous.next=newNode;
				
				
			}
			previous=newNode;
			System.out.print("Enter the next Element");
			input = s.nextInt();
		}
		return head;
		
	}

	public static void printLinkedList(node<Integer> input)
	{
		node<Integer> current = input;
		while(current !=null)
			
		{
			System.out.println(current.data + " ");
			current=current.next;
			
		}
		System.out.println();
	}
	public static int findMinPosition(node<Integer> head)
	{
		int minPosition = 0;
		node<Integer> minNode=head;
		node<Integer> temp = head;
		int currentPosition=0;
		while(temp!=null)
		{
			if(temp.data<minNode.data)
			{
				minPosition=currentPosition;
				minNode=temp;
			}
			currentPosition++;
			temp =temp.next;
		}
		return minPosition;
	}
	public static node<Integer> bubbleSort(node<Integer> head )
	{
		
	}
	public static node<Integer> swap(node<Integer> head)
	{
		
	}
	public static node<Integer> selectionSort(node<Integer> head)
	{
		if(head==null || head.next==null)
			return head;
		
		node<Integer> sortedSoFar = head;
		
		node<Integer> remaining= head.next;
		head.next=null;
		while(remaining != null)
		{
			node<Integer> currentNode = remaining;
			remaining = remaining.next;
			
			node<Integer> temp = sortedSoFar;
			node<Integer> prevTemp = null;
			while(temp!=null)
			{
				if(temp.data>currentNode.data){
					if(prevTemp == null)
					{
						currentNode.next = sortedSoFar;
						sortedSoFar=currentNode;
					}
					else
					{
						currentNode.next=temp;
						prevTemp.next=currentNode;
					}
					break;
				}
				prevTemp=temp;
				temp=temp.next;
		
				
				
			}
			if(temp==null)
			{
				prevTemp.next=currentNode;
				currentNode.next=null;
			}
		}
		return sortedSoFar;
	}
	
		
	
	public static void main(String[] args)
	{
		
		node<Integer> Head = getLinkedList();
		printLinkedList(Head);
		
		
	}
}
